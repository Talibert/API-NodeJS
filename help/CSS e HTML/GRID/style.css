* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html, body {
    width: 100%;
    height: 100%;
}
.container {
    width: 100%;
    height: 100vh;
    display: grid; /*DEFINE QUE UTILIZAREMOS O GRID, IGUAL QUANDO COLOCAMOS O FLEX*/
    grid-template-rows: 100px auto 100px; /*define quantas linhas iremos utilizar e seus tamanhos. Nesse caso são três linhas. Duas com 100px e uma com tamanho auto*/
    grid-template-columns: 50% 50%; /*define quantas colunas iremos utilzar e seus tamanhos. Nesse caso são duas colunas com 50%*/
    background-color: salmon;
    grid-row-gap: 5%; /*define uma quebra diretamente no grid, entre as linhas*/
}
.container2{
    display: flex;
    width: 100%;
    height: 100vh;
    background-color:aquamarine;
}
.header {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    background-color: springgreen;
    grid-area: header; /*estamos identificando o elemento grid*/
}
.body {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    background-color: violet;
    grid-area: body; /*estamos identificando o elemento grid*/
}
.footer {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    background-color: brown;
    grid-area: footer; /*estamos identificando o elemento grid*/
}

/* Grid Areas */
.grid-areas { /*devemos atribuir essa classe na nossa div*/
    grid-template-areas: 
    "header header" /*estamos dizendo que as duas primeiras áreas grid são do elemento header. Por isso ele é escrito duas vezes*/
    "body body" /*estamos dizendo que as duas áreas do meio do grid são do elemento body. Por isso ele é escrito duas vezes*/
    "footer footer"; /*estamos dizendo que as duas últimas áreas grid são do elemento footer. Por isso ele é escrito duas vezes*/
}